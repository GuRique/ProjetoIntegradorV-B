import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

public class SistemaMonitoramentoAmbiental {
    private static SerialComunicator serialComunicator;
    
    public static void main(String[] args) {
        GerenciadorSensores gerenciador = new GerenciadorSensores();
        
        // Inicializa comunicação serial com Arduino
        serialComunicator = new SerialComunicator("COM3", 9600); // Ajuste a porta COM
        
        InterfaceUsuario interfaceUsuario = new InterfaceUsuario();
        gerenciador.addObserver(interfaceUsuario);
        gerenciador.addObserver(new AlarmeSonoro());
        gerenciador.addObserver(new IndicadorVisual());
        gerenciador.addObserver(new LuzHandler());
        
        // Simulação de dados (substituir por leitura real da serial)
        simularDados(gerenciador);
    }
    
    private static void simularDados(GerenciadorSensores gerenciador) {
        // Em produção, isso seria substituído pela leitura da porta serial
        gerenciador.atualizarDadosSensor(new DadosSensor("Temperatura", 25.0, "C"));
        gerenciador.atualizarDadosSensor(new DadosSensor("Umidade", 60.0, "%"));
        gerenciador.atualizarDadosSensor(new DadosSensor("Luminosidade", 450.0, "lx"));
    }
}

class SerialComunicator {
    public SerialComunicator(String porta, int baudRate) {
        // Implementação real da comunicação serial
        System.out.println("Conectado ao Arduino na porta " + porta);
    }
    
    public void enviarComando(String comando) {
        // Envia comando para o Arduino
        System.out.println("[ARDUINO] Enviando comando: " + comando);
    }
}

class DadosSensor {
    private String tipo;
    private double valor;
    private String unidade;
    
    public DadosSensor(String tipo, double valor, String unidade) {
        this.tipo = tipo;
        this.valor = valor;
        this.unidade = unidade;
    }
    
    // Getters...
}

class GerenciadorSensores extends Observable {
    private List<DadosSensor> dadosSensores = new ArrayList<>();
    
    public void atualizarDadosSensor(DadosSensor dados) {
        // Implementação existente...
    }
}

class InterfaceUsuario implements Observer {
    @Override
    public void update(Observable o, Object arg) {
        // Implementação existente...
    }
}

class AlarmeSonoro implements Observer {
    private boolean alarmeAtivo = false;
    
    @Override
    public void update(Observable o, Object arg) {
        if (o instanceof GerenciadorSensores && arg instanceof DadosSensor) {
            DadosSensor dados = (DadosSensor) arg;
            GerenciadorSensores gerenciador = (GerenciadorSensores) o;
            
            boolean condicaoCritica = false;
            for (DadosSensor sensor : gerenciador.getTodosDados()) {
                if ((sensor.getTipo().equals("Temperatura") && sensor.getValor() > 40) ||
                    (sensor.getTipo().equals("Umidade") && sensor.getValor() < 20)) {
                    condicaoCritica = true;
                    break;
                }
            }
            
            if (condicaoCritica && !alarmeAtivo) {
                ativarAlarme();
            } 
            else if (!condicaoCritica && alarmeAtivo) {
                desativarAlarme();
            }
        }
    }
    
    private void ativarAlarme() {
        System.out.println("[ALARME] Ativando alarme intermitente");
        alarmeAtivo = true;
        // Envia comando para Arduino ativar buzzer em modo intermitente
        SistemaMonitoramentoAmbiental.serialComunicator.enviarComando("ALARME_ON");
    }
    
    private void desativarAlarme() {
        System.out.println("[ALARME] Desativando alarme");
        alarmeAtivo = false;
        SistemaMonitoramentoAmbiental.serialComunicator.enviarComando("ALARME_OFF");
    }
}

class IndicadorVisual implements Observer {
    @Override
    public void update(Observable o, Object arg) {
        if (o instanceof GerenciadorSensores && arg instanceof DadosSensor) {
            DadosSensor dados = (DadosSensor) arg;
            GerenciadorSensores gerenciador = (GerenciadorSensores) o;
            
            // Verifica temperatura
            DadosSensor temp = gerenciador.getTodosDados().stream()
                .filter(s -> s.getTipo().equals("Temperatura"))
                .findFirst().orElse(null);
                
            if (temp != null) {
                if (temp.getValor() > 40) {
                    SistemaMonitoramentoAmbiental.serialComunicator.enviarComando("TEMP_ALTA_ON");
                } else if (temp.getValor() < 0) {
                    SistemaMonitoramentoAmbiental.serialComunicator.enviarComando("TEMP_BAIXA_ON");
                } else {
                    SistemaMonitoramentoAmbiental.serialComunicator.enviarComando("TEMP_NORMAL");
                }
            }
            
            // Verifica umidade crítica para LED de alerta
            if (dados.getTipo().equals("Umidade") {
                if (dados.getValor() < 20) {
                    SistemaMonitoramentoAmbiental.serialComunicator.enviarComando("ALERTA_ON");
                } else {
                    SistemaMonitoramentoAmbiental.serialComunicator.enviarComando("ALERTA_OFF");
                }
            }
        }
    }
}

class LuzHandler implements Observer {
    @Override
    public void update(Observable o, Object arg) {
        if (o instanceof GerenciadorSensores && arg instanceof DadosSensor) {
            DadosSensor dados = (DadosSensor) arg;
            
            if (dados.getTipo().equals("Luminosidade")) {
                if (dados.getValor() > 700) {
                    SistemaMonitoramentoAmbiental.serialComunicator.enviarComando("LUZ_OFF");
                } else {
                    SistemaMonitoramentoAmbiental.serialComunicator.enviarComando("LUZ_ON");
                }
            }
        }
    }
}
